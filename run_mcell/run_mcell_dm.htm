<html>

<!--

This HTML/PHP file presents a web interface for running MCell
from a CellBlender Data Model file. It reads the Data Model and
presents the model_parameters list within an HTML form which can
be modified. The "Run MCell" button then reads the potentially
modified parameters from the HTML form and updates the data model
with these values. The modified data model is then written to a
new file and run using "python run_data_model_mcell.py". The
resulting reaction data output files are then read by PHP code
and converted into a JSON representation which is available to a
JavaScript plotting program "draw_data" which then plots the data
as the last step in rendering the page.

-->


<head>
	<title>MCell Web Development - Run MCell Data Model</title>
	<link rel="stylesheet" type="text/css" href="run_style.css">
	
	
	<style type="text/css">
	.hidden {
	  display: none;
	}
	.visible {
	  display: inline;
	}
	</style>
	
	
	<script>
	
	function sweep_checked ( s ) {
	  // This function is called when one of the "Sweep" check boxes is toggled.
	  // This function will then change the visibility status of the scalar and
	  // sweep fields to show the proper version and hide the other.
	  // alert ( "Sweep check" );
	  // console.log ( "sweep check" );
	
	  sweep_checkboxes = document.getElementsByName(s);
	  if (sweep_checkboxes.length == 1) {
	    sweep_item_name = s.substr("sweep_".length);
	    sweep_id = sweep_item_name + "_sweep";
	    scalar_id = sweep_item_name + "_scalar";
	
	    sweep_span = document.getElementById(sweep_id);
	    scalar_span = document.getElementById(scalar_id);
	    if ( sweep_checkboxes[0].checked ) {
	      // Show the sweep field and hide the scalar field
	      sweep_span.className = "visible";
	      scalar_span.className = "hidden";
	    } else {
	      // Hide the sweep field and show the scalar field
	      sweep_span.className = "hidden";
	      scalar_span.className = "visible";
	    }
	  }
	  calculate_total_runs();
	}

	</script>
	
</head>
	
	
<body onload="calculate_total_runs()">
	
	<hr/>
	<center><h1 style="font-size:200%">MCell Web Development at <a href="../..">mcell.snl.salk.edu</a> </h1></center>
	<hr/>
	
	
	<!--
	
	This is the main form for the application. It is mostly populated with
	PHP code that reads the data model, pulls out the parameters, and displays
	them as fields in a table.
	
	The data model is read every time to avoid storing it in the web page. When
	the model is run (or the page is otherwise refreshed), the model is read based
	on the current file name, and the values from the current form are merged into
	the model. This does create the possibility of a conflict if the user should
	change the data model name but not actually reload it. This might be fixed with
	a hidden HTML field to store the name of the last data model that has been read.
	
	-->
	
	<center>
	
	<form action="run_mcell_dm.htm" method="post"> <!-- onchange="calculate_total_runs()" -->
	
	<p>
	<b><span style="font-size:130%">Data Model Name:</span></b> &nbsp;
	<select name="model_file_name"> <!-- onchange="calculate_total_runs()" -->
	<option selected value=""></option>
  <option          value="data_model_1">Data Model 1</option>
	<option          value="data_model_2">Data Model 2</option>
	</select>
	&nbsp; &nbsp; <button type="submit" name="what" value="load" onclick="calculate_total_runs()">Load Model</button>
	</p>

	<table style="width:95%">

	  <tr>
	    <th style="width:5%">Sweep</th><th style="width:70%">Name &nbsp; = &nbsp; Value &nbsp; (units)</th><th>Description</th>
	  </tr>

	  <tr>
	    <td><center><input type="checkbox" id="sweep_A" name="sweep_A" value="0" onclick="sweep_checked('sweep_A')"><span id="A_count" class="visible"></span></center></td>
      <td>
        <span id="A_scalar" class="visible"> A = <input type="text" size="20" id="A_scalar_val" name="A_scalar" value="2" onchange="calculate_total_runs()"> (feet) </span>
        <span id="A_sweep"  class="hidden"> A = <input type="text" size="40" id="A_sweep_val"  name="A_sweep" value="6  ,  1:4:2" onchange="calculate_total_runs()"> (feet) </span>
      </td>
      <td>
        This is a parameter.
      </td>
	  </tr>

	  <tr>
	    <td><center><input type="checkbox" id="sweep_B" name="sweep_B" value="1" checked="1" onclick="sweep_checked('sweep_B')"><span id="B_count" class="hidden">x 1</span></center></td>
      <td>
        <span id="B_scalar" class="hidden"> B = <input type="text" size="20" id="B_scalar_val" name="B_scalar" value="5" onchange="calculate_total_runs()"> (sec) </span>
        <span id="B_sweep"  class="visible"> B = <input type="text" size="40" id="B_sweep_val"  name="B_sweep" value="0  ,  1:4:2  ,  25" onchange="calculate_total_runs()"> (sec) </span>
      </td>
      <td>
        This is another parameter.
      </td>
	  </tr>

	</table>

	<p style="padding-top:20">
	 &nbsp; &nbsp; <b>Seed Range:</b> &nbsp; <input type="text" size="3" min="1" id="start_seed" name="start_seed" value="1" onchange="calculate_total_runs()">
	 &nbsp; to &nbsp; <input type="text" size="3" min="1" id="end_seed" name="end_seed" value="3" onchange="calculate_total_runs()">

	 &nbsp; &nbsp; <b>Total Runs = <span id="total_runs">?</span> </b>
	 &nbsp; &nbsp; <b>Run Limit:</b> &nbsp; <input id="run_limit" type="text" size="3" min="1" name="run_limit" value="5" onchange="calculate_total_runs()">

	 &nbsp; &nbsp; <button id="run_button" style="background-color: #44ff44;" type="submit" name="what" value="run" onclick="calculate_total_runs()">Run</button>

	 &nbsp; &nbsp; <button type="submit" name="what" value="clear" onclick="calculate_total_runs()">Clear</button>
	</p>

	<hr/>

	</form>
	
	</center>
	
	
	<center id="mcellout" class="hidden"><table><tr><td><pre><?php echo $output; ?></pre></td></tr></table></center>
	
	<script>
	
	function toggle_mcell_output() {
	  // console.log ( "toggle mcell output!!" );
	  mco = document.getElementById("mcellout");
	  sh = document.getElementById("show_hide_control")
	  if (mco.getAttribute('class') != "hidden") {
	    mco.setAttribute('class', 'hidden');
	    sh.innerHTML = "<b>Show MCell Text Output</b>";
	  } else if (mco.getAttribute('class') == "hidden") {
	    mco.setAttribute('class', 'visible');
	    sh.innerHTML = "<b>Hide MCell Text Output</b>";
	  }
	}

	// PHP will have filled in the $all_par_names variable with the names of variables.
	// This next line generates an in-line JavaScript array containing all of that data.
	
	var all_par_names = <?php echo json_encode($all_par_names); ?>;

	function calculate_total_runs() {
	  // This function is called when any field changes.

	  // This is some test data ... uncomment the following line and it will be used.
	  var all_par_names = ['A', 'B'];
	  
	  var total_runs_so_far = 1;  // Always start out with at least one run
	  
	  var start_seed = parseInt(document.getElementById("start_seed").value);
	  var end_seed = parseInt(document.getElementById("end_seed").value);
	  
	  total_runs_so_far *= (1 + end_seed - start_seed);

	  for (n=0; n<all_par_names.length; n++) {
	    var par_name = all_par_names[n];
	    var par_sweep_check = document.getElementById("sweep_" + par_name);
 	    var runs_for_this_par = 1;
	    if (par_sweep_check.checked) {
  	    runs_for_this_par = 0;
	      par_sweep_string = document.getElementById(par_name + "_sweep_val").value;
	      // Split by commas to get the sections
	      par_sweep_sections = par_sweep_string.split(",");
        //alert ( par_name + " has " + par_sweep_sections.length + " sections ..." );
	      for (par_sweep_section_num in par_sweep_sections) {
	        par_sweep_section = par_sweep_sections[par_sweep_section_num].trim();
	        if (par_sweep_section.length > 0) {
	          // Split by colons to get the subsections
	          par_sweep_subsections = par_sweep_section.split(":");
	          if (par_sweep_subsections.length <= 1) {
	            // No colons, so this is either a single value (add 1) or empty (add none)
	            runs_for_this_par += par_sweep_subsections.length;
	          } else {
	            // At least one colon, so this is a range
	            var sweep_start = parseFloat(par_sweep_subsections[0]);
	            var sweep_end = parseFloat(par_sweep_subsections[1]);
	            var sweep_step = 1.0;
    	        if (par_sweep_subsections.length >= 3) {
    	          // The third value is the step size
    	          sweep_step = parseFloat(par_sweep_subsections[2]);
    	        }
    	        // The tolerance is somewhat arbitrary ...
	            runs_for_this_par += 1 + Math.floor(1.0001*(sweep_end-sweep_start)/sweep_step);
	          }
	        }
	      }
	    }
      if (runs_for_this_par != 1) {
	      document.getElementById(par_name + "_count").innerHTML = " x <b>" + runs_for_this_par + "</b>";
	      document.getElementById(par_name + "_count").className = "visible";
	    } else {
	      document.getElementById(par_name + "_count").innerHTML = "";
	      document.getElementById(par_name + "_count").className = "hidden";
	    }
	    total_runs_so_far *= runs_for_this_par;
	  }

	  total_runs_field = document.getElementById("total_runs");
 	  total_runs_field.innerHTML = total_runs_so_far;

	  run_button = document.getElementById("run_button");
	  if (total_runs_so_far > parseInt(document.getElementById("run_limit").value)) {
	    run_button.style.background = "#ff8888";
	    run_button.disabled = true;
	  } else {
	    run_button.style.background = "#44ff44";
	    run_button.disabled = false;
	  }

 	  return (total_runs_so_far);
	}
	

	// PHP will have filled in the $plot_data variable with the plot data (above).
	// This next line generates an in-line JavaScript array containing all of that data.
	// The resulting 3D array will be indexed by Plot#, x/y, step
	
	var plot_data = <?php echo json_encode($plot_data); ?>;
	
	
	// This function calculates an appropriate grid spacing in application units
	
	function delta_per_division_integer ( value_range, pixel_range, nominal_pixels_per_division ) {
	  // We generally want our divisions to be 1's, 2's, or 5's
	  // (for example, every .01, or every .02, or every .05, or every .1 ...)
	
	  var nominal_divisions_per_window = (pixel_range + (nominal_pixels_per_division/2)) / nominal_pixels_per_division;
	  var nominal_delta_per_division = value_range / nominal_divisions_per_window;
	
	  // First normalize the value between 1 and 10
	  var factors_of_10 = 0;
	  var tpd = nominal_delta_per_division;
	  while (tpd > 1) {
	    tpd = tpd / 10;
	    factors_of_10 ++;
	  }
	  while (tpd < 1) {
	    tpd = tpd * 10;
	    factors_of_10 --;
	  }
	  // Now we have tpd as a floating value >= 1 and less than 10 so make some decisions
	  var tpdi = 0;
	  if (tpd < 1.5) {
	    tpdi = 1;
	  } else if (tpd < 3) {
	    tpdi = 2;
	  } else {
	    tpdi = 5;
	  }
	  // Now restore the magnitude
	  while (factors_of_10 > 0) {
	    tpdi = tpdi * 10;
	    factors_of_10 --;
	  }
	  while (factors_of_10 < 0) {
	    tpdi = tpdi / 10;
	    factors_of_10 ++;
	  }
	  return ( tpdi );
	}
	
	// This function tries to produce reasonably compact strings from numbers
	function get_compact_string ( x ) {
	  // Start with toPrecision
	  xp = x.toPrecision(3);
	  if (xp.indexOf('.') >= 0) {
	    // It has a decimal point, so might be able to remove trailing zeros
	    if (xp.indexOf('e') < 0) {
	      // It doesn't have an "e", so trailing zeros can be removed
	      while (xp.endsWith('0')) {
      	  xp = xp.slice(0,-1);
	      }
	    }
	    if (xp.endsWith('.')) {
    	  xp = xp.slice(0,-1);
	    }
    }
    // Check if exponential is smaller
    xe = x.toExponential(2);
    if (xe.length < xp.length) {
      xp = xe;
	  }
	  return ( xp );
	}
	
	// This function just draws a plot of plot_data
	
	function draw_data() {
	
	  // This is some test data ... uncomment the following line and it will be used.
	  // var plot_data = [ [ [0.28, 0.4, 0.5, 0.7], [-0.3,11,10,5] ], [ [0.28, 0.4, 0.5, 0.7], [0,10,15,0] ] ];
	
	  var font_spec = "18px Arial"; // Arial or Times
	  var font_height = 18;
	
	  // alert ( "draw_data() plot_data.length = " + plot_data.length );
	  if (plot_data.length > 0) {
	    // plot_data [curve_index][x/y][point#]
	
	    var xmin=plot_data[0][0][0];
	    var xmax=plot_data[0][0][0];
	    var ymin=plot_data[0][1][0];
	    var ymax=plot_data[0][1][0];
	    var x, y;
	
	    for (var pd=0; pd<plot_data.length; pd++) {
	      for (var i=0; i<plot_data[pd][0].length; i++) {
	        x = plot_data[pd][0][i];
	        y = plot_data[pd][1][i];
	        if (x < xmin) xmin = x;
	        if (x > xmax) xmax = x;
	        if (y < ymin) ymin = y;
	        if (y > ymax) ymax = y;
	      }
	    }
	    if (ymin == ymax) {
	      ymax += 1;
	      ymin += -1;
	    }
	
	    c = document.getElementById ( "drawing_area" );
	    var w = c.width;
	    var h = c.height;
	
	    var ctx = c.getContext("2d");
	    ctx.fillStyle = "#000000";
	    ctx.fillRect(0,0,w,h);
	
	    // Calculate the margins
	    var left_margin = 0.07;
	    var right_margin = 0.05;
	    var top_margin = 0.05;
	    var bottom_margin = 0.07;
	
	    var xL = left_margin*w; // Left side
	    var yB = (1.0 - bottom_margin)*h; // Bottom
	    var xR = (1-right_margin)*w; // Right side
	    var yT = top_margin*h; // Top
	
	    // Draw the grid lines and labels
	
	    var x_delta = delta_per_division_integer ( xmax-xmin, xR-xL, 120 );
	    var y_delta = delta_per_division_integer ( ymax-ymin, yB-yT, 120 );
	
	    var x_start = Math.floor(xmin/x_delta) * x_delta;
	    while (x_start > xmin) {
      	x_start = x_start - x_delta;
	    }
	    while (x_start < xmin) {
      	x_start = x_start + x_delta;
	    }
	
	    for (var x_line=x_start; x_line<xmax; x_line+=x_delta) {
	      x = w * (x_line-xmin) / (xmax-xmin);
	      x = (left_margin*w) + ((1-(right_margin+left_margin))*x);
	      ctx.strokeStyle = "#444444";
	      ctx.beginPath();
	      ctx.moveTo(x,yB);
	      ctx.lineTo(x,yT);
	      ctx.stroke();
	      ctx.font=font_spec; // Arial or Times
	      ctx.fillStyle="#888888";
	      var label = get_compact_string(x_line);
	      ctx.fillText(label, x-(ctx.measureText(label).width/2), yB+font_height);
	    }
	
	    var y_start = Math.floor(ymin/y_delta) * y_delta;
	    while (y_start > ymin) {
      	y_start = y_start - y_delta;
	    }
	    while (y_start < ymin) {
      	y_start = y_start + y_delta;
	    }
	
	    for (var y_line=y_start; y_line<ymax; y_line+=y_delta) {
	      y = h * (y_line-ymin) / (ymax-ymin);
	      y = h - y;
	      y = (top_margin*h) + ((1-(top_margin+bottom_margin))*y);
	      ctx.strokeStyle = "#444444";
	      ctx.beginPath();
	      ctx.moveTo(xL,y);
	      ctx.lineTo(xR,y);
	      ctx.stroke();
	      ctx.font=font_spec; // Arial or Times
	      ctx.fillStyle="#888888";
	      var label = get_compact_string(y_line);
	      ctx.fillText(label, xL-(ctx.measureText(label).width+7), y+(font_height/3));
	    }
	
	    // Draw the surrounding box
	
	    ctx.strokeStyle = "#FFFFFF";
	    ctx.beginPath();
	    ctx.moveTo(xL,yB);
	    ctx.lineTo(xR,yB);
	    ctx.lineTo(xR,yT);
	    ctx.lineTo(xL,yT);
	    ctx.lineTo(xL,yB);
	    ctx.stroke();
	
	    // Plot the actual data (easiest part!!)
	
	    for (var pd=0; pd<plot_data.length; pd++) {
	      // console.log ( "New Plot" );
	      var colors = [ "#ff0000", "#00ff00", "#0000ff", "#ffff00", "#ff00ff", "#00ffff" ];
	      ctx.strokeStyle = colors[pd%colors.length];
	      ctx.beginPath();
	      for (var i=0; i<plot_data[pd][0].length; i++) {
	        x = plot_data[pd][0][i];
	        y = plot_data[pd][1][i];
	        x = w * (x-xmin) / (xmax-xmin);
	        y = h * (y-ymin) / (ymax-ymin);
	        y = h - y;
	        x = (left_margin*w) + ((1-(right_margin+left_margin))*x);
	        y = (top_margin*h) + ((1-(top_margin+bottom_margin))*y);
	        if (i==0) {
          	ctx.moveTo(x,y);
	        } else {
          	ctx.lineTo(x,y);
	        }
	      }
	      ctx.stroke();
	    }
	  }
	
	}
	
	</script>
	
</body>
</html>

